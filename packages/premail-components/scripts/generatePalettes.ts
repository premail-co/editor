import fs from "fs";
import path from "path";
import { format } from "prettier";

interface IPalette {
  [key: string]: string | string[];
}

const kebabize = (str: string) => {
  return str
    .split("")
    .map((letter, idx) => {
      return letter.match(/[a-z]/i) && letter.toUpperCase() === letter
        ? `${idx !== 0 ? "-" : ""}${letter.toLowerCase()}`
        : letter;
    })
    .join("");
};

const generateScssFileContents = (palette: IPalette, paletteName: string) => {
  const entries = Object.entries(palette);

  return `
    /** -------- THIS IS AN AUTOGENERATED FILE, DO NOT EDIT -------- **/
    @mixin ${paletteName}-palette {
        /** Palette: ${paletteName} **/
        ${entries
          .map(([key, value]) => {
            if (Array.isArray(value)) {
              return `${value
                .map((valueItem, i) => {
                  return `--${kebabize(key)}-${i}: ${valueItem};\n`;
                })
                .join("")}`;
            } else {
              return `--${kebabize(key)}: ${value};\n`;
            }
          })
          .join("")}
    }
  `;
};

const generatePalettes = async () => {
  const files = await fs.promises.readdir(
    path.resolve(__dirname, "../src/palettes")
  );
  const filteredFiles = files.filter(
    (file) => path.extname(file).toLowerCase() === ".json",
    false
  );
  const readFilesPromises = filteredFiles.map(async (fileName: string) => {
    const filePath = path.resolve(__dirname, `../src/palettes/${fileName}`);
    const parsedFile = path.parse(filePath);
    const buffer = await fs.promises.readFile(filePath);
    const parsedContents = JSON.parse(buffer.toString());

    console.log(`Generating scss file for ${parsedFile.name}`);
    if (
      typeof parsedContents === "object" &&
      !Array.isArray(parsedContents) &&
      parsedContents !== null
    ) {
      const palette: IPalette = parsedContents;
      const generatedDataFolderPath = path.resolve(
        __dirname,
        "../src/theme/generated-palettes"
      );
      await fs.promises.mkdir(generatedDataFolderPath, {
        recursive: true,
      });
      const contents = generateScssFileContents(palette, parsedFile.name);

      await fs.promises.writeFile(
        `${generatedDataFolderPath}/${parsedFile.name}.scss`,
        format(contents, { parser: "scss" })
      );
    } else {
      throw new Error(`File is not a Palette object ${filePath}`);
    }
  });
  await Promise.all(readFilesPromises);
};

generatePalettes()
  .then(() => {
    console.log(`success`);
  })
  .catch(console.error);
